rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ===== 한양메일 점유 상태(서버 전용) =====
    match /email_claims/{emailId} {
      allow read, write: if false;
    }
    // ===== 이메일 인증 코드 컬렉션 =====
    // 앱 클라이언트에서 직접 접근하지 못하도록 전면 차단 (클라우드 함수 전용)
    match /email_verifications/{emailId} {
      allow read, write: if false;
    }

    
    // ===== 사용자 컬렉션 =====
    match /users/{userId} {
      // 본인만 민감한 필드 수정 가능
      allow read: if request.auth != null; // 인증된 사용자만 프로필 읽기 가능
      allow create: if request.auth != null 
        && request.auth.uid == userId
        && request.resource.data.emailVerified == true
        && request.resource.data.hanyangEmail.matches('.*@hanyang.ac.kr$');
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false; // 사용자 삭제는 금지
      
      // 저장된 게시글 서브컬렉션
      match /savedPosts/{postId} {
        // 본인만 자신의 저장된 게시글 읽기/쓰기 가능
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // 사용자 프로필 게시글 (후기 등)
      match /posts/{postId} {
        // 읽기: 모든 인증된 사용자 (isHidden이 false이거나 본인인 경우)
        allow read: if 
          request.auth != null &&
          (request.auth.uid == userId || 
           (!resource.data.keys().hasAny(['isHidden']) || !resource.data.isHidden));
        
        // 생성: 본인만 가능 (후기 작성 시)
        // type='meetup_review'이고 authorId가 본인인 경우에만 허용
        allow create: if 
          request.auth != null &&
          request.auth.uid == userId &&
          request.resource.data.type == 'meetup_review' &&
          request.resource.data.authorId == userId;
        
        // 수정: 
        // 1) 본인: isHidden, updatedAt 필드 변경 가능
        // 2) 모든 인증된 사용자: likedBy, likeCount 필드 변경 가능 (좋아요 기능)
        // 3) 모든 인증된 사용자: commentCount 필드 변경 가능 (댓글 수 업데이트)
        allow update: if 
          request.auth != null &&
          (
            // 본인: 숨김 처리
            (request.auth.uid == userId &&
             request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isHidden', 'updatedAt'])) ||
            
            // 모든 사용자: 좋아요 토글
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy', 'likeCount']) ||
            
            // 모든 사용자: 댓글 수 업데이트
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['commentCount'])
          );
        
        // 삭제: 본인만 가능 (후기 삭제 시)
        allow delete: if 
          request.auth != null &&
          request.auth.uid == userId;
      }
    }
    
    // ===== 친구 요청 컬렉션 =====
    match /friend_requests/{requestId} {
      // 요청 생성: 발신자만 가능, 자기 자신에게 요청 금지
      allow create: if 
        request.auth != null &&
        request.auth.uid == request.resource.data.fromUid &&
        request.auth.uid != request.resource.data.toUid &&
        request.resource.data.status == 'PENDING';
      
      // 요청 읽기: 발신자 또는 수신자만 가능
      // requestId 형식: {fromUid}_{toUid}
      // 문서가 없어도 읽기 허용 (존재 여부 확인용)
      allow read: if 
        request.auth != null &&
        (
          // 문서가 존재하는 경우: 관련 당사자만
          (resource != null &&
           (request.auth.uid == resource.data.fromUid || 
            request.auth.uid == resource.data.toUid)) ||
          // 문서가 존재하지 않는 경우: requestId 패턴에 자신의 ID 포함 시
          (resource == null &&
           requestId.matches('.*' + request.auth.uid + '.*'))
        );
      
      // 요청 업데이트: 상태 전이 규칙 적용
      allow update: if 
        request.auth != null &&
        (
          // PENDING → CANCELED: 발신자만 가능
          (resource.data.status == 'PENDING' && 
           request.resource.data.status == 'CANCELED' &&
           request.auth.uid == resource.data.fromUid) ||
          
          // PENDING → ACCEPTED/REJECTED: 수신자만 가능
          (resource.data.status == 'PENDING' && 
           (request.resource.data.status == 'ACCEPTED' || 
            request.resource.data.status == 'REJECTED') &&
           request.auth.uid == resource.data.toUid)
        );
      
      // 요청 삭제: 금지 (상태 변경으로 처리)
      allow delete: if false;
    }
    
    // ===== 친구 관계 컬렉션 =====
    match /friendships/{pairId} {
      // 읽기: 인증된 모든 사용자가 읽을 수 있음 (친구 관계 확인용)
      // pairId 형식: {uid1}__{uid2} (사전순 정렬)
      allow read: if request.auth != null;
      
      // 쓰기: 클라우드 함수만 가능 (보안 강화)
      allow write: if false;
    }
    
    // ===== 차단 컬렉션 =====
    match /blocks/{blockId} {
      // 읽기: 차단 관계에 포함된 사용자 모두 확인 가능
      // blockId 형식: {blocker}_{blocked}
      // 문서가 없어도 읽기 허용 (존재 여부 확인용)
      allow read: if 
        request.auth != null &&
        (
          // 문서가 존재하는 경우: 관련 당사자만
          (resource != null && 
           (request.auth.uid == resource.data.blocker ||
            request.auth.uid == resource.data.blocked)) ||
          // 문서가 존재하지 않는 경우: blockId 패턴에 자신의 ID 포함 시
          (resource == null &&
           blockId.matches('.*' + request.auth.uid + '.*'))
        );
      
      // 생성/삭제: 차단하는 사용자만 가능
      allow create, delete: if 
        request.auth != null &&
        request.auth.uid == request.resource.data.blocker;
      
      // 업데이트: 금지
      allow update: if false;
    }
    
    // ===== 관계(Relationships) 컬렉션 =====
    match /relationships/{relationshipId} {
      // 읽기: 본인과 관련된 관계만 읽기 가능
      allow read: if 
        request.auth != null &&
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.friendId);
      
      // 생성: 본인이 userId인 경우만 가능
      allow create: if 
        request.auth != null &&
        request.auth.uid == request.resource.data.userId;
      
      // 업데이트: 본인과 관련된 관계만 수정 가능
      allow update: if 
        request.auth != null &&
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.friendId);
      
      // 삭제: 본인과 관련된 관계만 삭제 가능
      allow delete: if 
        request.auth != null &&
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.friendId);
    }
    
    // ===== 친구 카테고리 컬렉션 =====
    match /friend_categories/{categoryId} {
      // 읽기: 본인의 카테고리 또는 내가 포함된 카테고리 읽기 가능
      allow read: if 
        request.auth != null &&
        (request.auth.uid == resource.data.userId || 
         request.auth.uid in resource.data.friendIds);
      
      // 생성: 본인이 userId인 경우만 가능
      allow create: if 
        request.auth != null &&
        request.auth.uid == request.resource.data.userId;
      
      // 업데이트: 본인의 카테고리만 수정 가능
      allow update: if 
        request.auth != null &&
        request.auth.uid == resource.data.userId;
      
      // 삭제: 본인의 카테고리만 삭제 가능
      allow delete: if 
        request.auth != null &&
        request.auth.uid == resource.data.userId;
    }
    
    // ===== 기존 컬렉션들 (호환성 유지) =====
    match /posts/{postId} {
      // 게시글 읽기: 공개 범위에 따라 제한
      // 1. 전체 공개(visibility == 'public' 또는 필드 없음) → 인증된 사용자만 읽기 가능
      // 2. 카테고리별 공개(visibility == 'category') → allowedUserIds에 포함된 사용자만 읽기 가능
      allow read: if request.auth != null &&
        (
          // 전체 공개인 경우 (기본값)
          (!resource.data.keys().hasAny(['visibility']) || resource.data.visibility == 'public') ||
          // 카테고리별 공개이고 허용된 사용자인 경우
          (resource.data.visibility == 'category' && 
           (request.auth.uid == resource.data.userId || 
            (resource.data.keys().hasAny(['allowedUserIds']) && request.auth.uid in resource.data.allowedUserIds)))
        );
      
      allow create: if request.auth != null
        && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.emailVerified == true
        && request.resource.data.userId == request.auth.uid;
      
      // 게시글 수정: 작성자만 가능 또는 좋아요 필드만 변경하는 경우 읽기 권한이 있는 사용자 가능
      // userId='deleted'는 수정 불가 (탈퇴한 사용자 게시글 보호)
      allow update: if request.auth != null && 
        resource.data.userId != 'deleted' &&
        // 읽기 권한 체크 (전체 공개 또는 허용된 사용자)
        (
          (!resource.data.keys().hasAny(['visibility']) || resource.data.visibility == 'public') ||
          (resource.data.visibility == 'category' && 
           (request.auth.uid == resource.data.userId || 
            (resource.data.keys().hasAny(['allowedUserIds']) && request.auth.uid in resource.data.allowedUserIds)))
        ) &&
        // createdAt 필드는 절대 수정 불가
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['createdAt'])) &&
        (request.auth.uid == resource.data.userId ||
         // 좋아요 필드만 변경하는 경우 누구나 가능 (읽기 권한이 있으면)
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']));
      
      // 게시글 삭제: 작성자만 가능 (userId='deleted'는 삭제 불가)
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        resource.data.userId != 'deleted';
      
      // 게시글의 댓글
      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null
          && exists(/databases/$(database)/documents/users/$(request.auth.uid))
          && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.emailVerified == true;
        allow update: if request.auth != null 
          && resource.data.userId != 'deleted'
          && request.auth.uid == resource.data.userId;
        allow delete: if request.auth != null 
          && resource.data.userId != 'deleted'
          && request.auth.uid == resource.data.userId;
      }
    }
    
    match /meetups/{meetupId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null
        && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.emailVerified == true;
      
      // 업데이트 규칙 세분화
      allow update: if request.auth != null && (
        // 주최자는 모든 필드 수정 가능
        request.auth.uid == resource.data.userId ||
        // 참여자는 currentParticipants만 수정 가능 (참여/취소 시)
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentParticipants', 'updatedAt']) &&
         request.resource.data.currentParticipants is int &&
         request.resource.data.currentParticipants >= 1 &&
         request.resource.data.currentParticipants <= resource.data.maxParticipants + 1)
      );
      
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // 모임의 댓글
      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null
          && exists(/databases/$(database)/documents/users/$(request.auth.uid))
          && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.emailVerified == true;
        allow update: if request.auth != null 
          && resource.data.userId != 'deleted'
          && request.auth.uid == resource.data.userId;
        allow delete: if request.auth != null 
          && resource.data.userId != 'deleted'
          && request.auth.uid == resource.data.userId;
      }
    }
    
    // ===== 모임 후기 컬렉션 =====
    match /meetup_reviews/{reviewId} {
      // 읽기 허용 범위:
      //  - 후기 작성자(authorId)
      //  - 수락한 참여자(approvedParticipants)
      //  - 수락 대기 중인 참여자(pendingParticipants) → 후기 내용을 확인 후 수락/거절할 수 있어야 함
      allow read: if 
        request.auth != null &&
        (
          request.auth.uid == resource.data.authorId ||
          (resource.data.keys().hasAny(['approvedParticipants']) && request.auth.uid in resource.data.approvedParticipants) ||
          (resource.data.keys().hasAny(['pendingParticipants']) && request.auth.uid in resource.data.pendingParticipants)
        );
      
      // 생성: 모임장만 후기 생성 가능 (emailVerified 확인)
      allow create: if 
        request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.emailVerified == true &&
        request.auth.uid == request.resource.data.authorId;
      
      // 수정: 
      //  1) 모임장은 모든 필드 수정 가능
      //  2) 참여자는 자신의 UID를 pendingParticipants에서 제거하고 
      //     approvedParticipants 또는 rejectedParticipants에 추가하는 것만 가능
      allow update: if 
        request.auth != null &&
        (
          // 모임장: 모든 수정 가능
          request.auth.uid == resource.data.authorId ||
          
          // 참여자: 자신의 수락/거절 처리만 가능
          (
            // 현재 pendingParticipants에 포함되어 있고
            (resource.data.keys().hasAny(['pendingParticipants']) && request.auth.uid in resource.data.pendingParticipants) &&
            
            // pendingParticipants에서 자신을 제거하고
            (request.resource.data.keys().hasAny(['pendingParticipants']) && !(request.auth.uid in request.resource.data.pendingParticipants)) &&
            
            // approvedParticipants 또는 rejectedParticipants에 자신을 추가하며
            (
              (request.resource.data.keys().hasAny(['approvedParticipants']) && request.auth.uid in request.resource.data.approvedParticipants) ||
              (request.resource.data.keys().hasAny(['rejectedParticipants']) && request.auth.uid in request.resource.data.rejectedParticipants)
            ) &&
            
            // 다른 필드는 변경하지 않음 (authorId, content, imageUrl 등)
            request.resource.data.authorId == resource.data.authorId &&
            request.resource.data.meetupId == resource.data.meetupId &&
            request.resource.data.content == resource.data.content &&
            request.resource.data.imageUrl == resource.data.imageUrl
          )
        );
      
      // 삭제: 모임장만 후기 삭제 가능
      allow delete: if 
        request.auth != null &&
        request.auth.uid == resource.data.authorId;
    }
    
    // ===== 모임 후기 수락 요청 컬렉션 =====
    match /review_requests/{requestId} {
      // 읽기: 요청자(requesterId) 또는 수신자(recipientId)만 읽기 가능
      allow read: if 
        request.auth != null &&
        (request.auth.uid == resource.data.requesterId ||
         request.auth.uid == resource.data.recipientId);
      
      // 생성: 모임장(requesterId)이 자신의 후기에 대해 참여자들에게 요청 생성 가능
      allow create: if 
        request.auth != null &&
        request.auth.uid == request.resource.data.requesterId &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.emailVerified == true;
      
      // 수정: 요청자 또는 수신자만 수정 가능 (상태 업데이트)
      allow update: if 
        request.auth != null &&
        (request.auth.uid == resource.data.requesterId ||
         request.auth.uid == resource.data.recipientId);
      
      // 삭제: 요청자만 삭제 가능
      allow delete: if 
        request.auth != null &&
        request.auth.uid == resource.data.requesterId;
    }
    
    // ===== 모임 참여자 컬렉션 =====
    match /meetup_participants/{participantId} {
      // 읽기: 모든 사용자가 참여자 정보를 볼 수 있음
      allow read: if true;
      
      // 생성: 본인만 참여 신청 가능
      allow create: if 
        request.auth != null &&
        request.auth.uid == request.resource.data.userId;
      
      // 업데이트: 본인 또는 모임 주최자만 수정 가능
      allow update: if 
        request.auth != null &&
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.hostId);
      
      // 삭제: 본인만 참여 취소 가능
      allow delete: if 
        request.auth != null &&
        request.auth.uid == resource.data.userId;
    }
    
    // ===== 리뷰 합의 기능 추가 규칙 =====
    
    // 관리자 설정 (Feature Flags 등)
    match /admin_settings/{document} {
      // 읽기: 로그인한 사용자만 가능 (Feature Flag 확인용)
      allow read: if request.auth != null;
      
      // 쓰기: 관리자만 가능
      allow write: if 
        request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // 사용자 설정 (알림 설정 등 기존 기능 확장)
    match /user_settings/{userId} {
      // 본인만 읽기/쓰기 가능
      allow read, write: if 
        request.auth != null && 
        request.auth.uid == userId;
    }

    // 모임별 리뷰 요청 (meetings/{meetupId}/pendingReviews/{reviewId})
    match /meetings/{meetupId}/pendingReviews/{reviewId} {
      // 리뷰 요청 읽기: 요청자 또는 수신자만 가능
      allow read: if 
        request.auth != null &&
        (request.auth.uid == resource.data.requesterId || 
         request.auth.uid == resource.data.recipientId);
      
      // 리뷰 요청 생성: 요청자만 가능, 해당 모임 참여자여야 함
      allow create: if 
        request.auth != null &&
        request.auth.uid == request.resource.data.requesterId &&
        // 모임 참여자인지 확인
        request.auth.uid in get(/databases/$(database)/documents/meetups/$(meetupId)).data.participants &&
        // 수신자도 참여자인지 확인
        request.resource.data.recipientId in get(/databases/$(database)/documents/meetups/$(meetupId)).data.participants &&
        // 자기 자신에게 요청하지 않음
        request.auth.uid != request.resource.data.recipientId &&
        // 초기 상태는 pending이어야 함
        request.resource.data.status == 'pending';
      
      // 리뷰 요청 업데이트: 수신자만 상태 변경 가능
      allow update: if 
        request.auth != null &&
        request.auth.uid == resource.data.recipientId &&
        // 기존 상태가 pending이어야 함
        resource.data.status == 'pending' &&
        // 새 상태는 accepted 또는 rejected만 가능
        (request.resource.data.status == 'accepted' || 
         request.resource.data.status == 'rejected') &&
        // 다른 필드는 변경하지 않음 (상태와 응답 시간, 메시지만)
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'respondedAt', 'responseMessage']);
      
      // 삭제 금지 (상태 변경으로만 관리)
      allow delete: if false;
    }

    // 모임별 리뷰 합의 결과 (meetings/{meetupId}/reviews/{consensusId})
    match /meetings/{meetupId}/reviews/{consensusId} {
      // 리뷰 합의 읽기: 해당 모임 참여자만 가능
      allow read: if 
        request.auth != null &&
        request.auth.uid in get(/databases/$(database)/documents/meetups/$(meetupId)).data.participants;
      
      // 리뷰 합의 생성: 서버 사이드 로직으로만 생성 (Cloud Functions)
      // 클라이언트에서 직접 생성 금지
      allow create: if false;
      
      // 리뷰 합의 업데이트/삭제: 금지 (불변 데이터)
      allow update, delete: if false;
    }

    // 알림 컬렉션 (기존 확장)
    match /notifications/{notificationId} {
      // 본인의 알림만 읽기 가능
      allow read: if 
        request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // 알림 생성: 인증된 사용자만 생성 가능
      allow create: if request.auth != null;
      
      // 알림 업데이트: 본인만 읽음 상태 변경 가능
      allow update: if 
        request.auth != null && 
        request.auth.uid == resource.data.userId &&
        // 읽음 상태만 변경 가능
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      
      // 알림 삭제: 본인만 가능
      allow delete: if 
        request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // ===== 광고 배너 컬렉션 =====
    match /ad_banners/{bannerId} {
      // 모든 사용자가 광고를 읽을 수 있음
      allow read: if true;
      
      // 광고 생성/수정/삭제는 Firebase Console에서만 가능
      // (관리자가 직접 관리)
      allow write: if false;
    }
    
    // ===== 후기(Reviews) 컬렉션 =====
    match /reviews/{reviewId} {
      // 읽기: 본인의 후기 또는 공개된 후기만 읽기 가능
      allow read: if 
        request.auth != null &&
        (request.auth.uid == resource.data.authorId || 
         resource.data.privacyLevel == 'public' ||
         (resource.data.privacyLevel == 'friends' && 
          exists(/databases/$(database)/documents/relationships/$(request.auth.uid + '_' + resource.data.authorId))) ||
         (resource.data.privacyLevel == 'school' && 
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.school == 
          get(/databases/$(database)/documents/users/$(resource.data.authorId)).data.school));
      
      // 생성: 클라우드 함수만 가능 (모임 후기 자동 발행)
      allow create: if false;
      
      // 수정: 본인의 후기만 수정 가능 (hidden 필드 변경)
      allow update: if
        request.auth != null &&
        request.auth.uid == resource.data.authorId &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['hidden', 'updatedAt']);
      
      // 삭제: 본인의 후기만 삭제 가능
      allow delete: if 
        request.auth != null &&
        request.auth.uid == resource.data.authorId;
    }
    
    // ===== 댓글(Comments) 컬렉션 (최상위) =====
    match /comments/{commentId} {
      // 읽기: 인증된 사용자만 댓글을 읽을 수 있음
      allow read: if request.auth != null;
      
      // 생성: 로그인한 사용자만 댓글 작성 가능 (emailVerified 확인)
      // 대댓글 검증: parentCommentId가 있으면 depth는 1, 없으면 depth는 0
      allow create: if 
        request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.emailVerified == true &&
        request.auth.uid == request.resource.data.userId &&
        // 대댓글 깊이 검증
        ((request.resource.data.parentCommentId == null && request.resource.data.depth == 0) ||
         (request.resource.data.parentCommentId != null && request.resource.data.depth == 1));
      
      // 수정: 본인의 댓글 수정 가능 또는 좋아요/답글 필드만 변경하는 경우 누구나 가능
      // userId='deleted'는 수정 불가 (탈퇴한 사용자 댓글 보호)
      allow update: if 
        request.auth != null &&
        resource.data.userId != 'deleted' &&
        // createdAt 필드는 절대 수정 불가
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['createdAt'])) &&
        (request.auth.uid == resource.data.userId ||
         // 좋아요 관련 필드만 변경하는 경우 (likeCount, likedBy만 변경 허용)
         (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likeCount', 'likedBy']) ||
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likeCount']) ||
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy'])));
      
      // 삭제: 본인의 댓글만 삭제 가능 (userId='deleted'는 삭제 불가)
      allow delete: if 
        request.auth != null &&
        request.auth.uid == resource.data.userId &&
        resource.data.userId != 'deleted';
    }
    
    // ===== 기존 호환성 유지 끝 =====
    
    // ===== DM(Direct Message) 컬렉션 =====
    match /conversations/{conversationId} {
      // conversationId 형식: {작은uid}_{큰uid} (사전순 정렬)
      
      // ===== 헬퍼 함수 =====
      function otherUid() {
        return request.resource.data.participants[0] == request.auth.uid
          ? request.resource.data.participants[1]
          : request.resource.data.participants[0];
      }

      function pairId(uid1, uid2) {
        return uid1 < uid2 ? (uid1 + '__' + uid2) : (uid2 + '__' + uid1);
      }

      // 친구 여부 확인
      function isFriendWith(other) {
        return exists(/databases/$(database)/documents/friendships/$(pairId(request.auth.uid, other)));
      }

      // 게시글을 통해 DM 허용 여부(익명 글 또는 전체공개 글)
      function canDMViaPost() {
        return request.resource.data.keys().hasAny(['postId']) &&
          exists(/databases/$(database)/documents/posts/$(request.resource.data.postId)) &&
          get(/databases/$(database)/documents/posts/$(request.resource.data.postId)).data.userId == otherUid() &&
          (
            get(/databases/$(database)/documents/posts/$(request.resource.data.postId)).data.isAnonymous == true ||
            get(/databases/$(database)/documents/posts/$(request.resource.data.postId)).data.visibility == 'public'
          );
      }
      
      // 개별 문서 읽기: 존재하지 않는 문서도 확인 가능하도록 허용
      // (대화방 존재 여부 체크 시 permission-denied 방지)
      allow get: if request.auth != null &&
        (resource == null || request.auth.uid in resource.data.participants);
      
      // 목록 조회: 로그인한 사용자만 (쿼리 조건으로 필터링됨)
      allow list: if request.auth != null;
      
      // 생성: 필수 필드 최소화 + 친구이거나(OR) 게시글(익명/전체공개)을 통해 DM 가능
      allow create: if request.auth != null &&
        // 본인이 participants 배열에 포함
        request.auth.uid in request.resource.data.participants &&
        // 정확히 2명의 참여자
        request.resource.data.participants.size() == 2 &&
        // 필수 필드 존재 (유연하게)
        request.resource.data.keys().hasAll([
          'participants', 'participantNames', 'participantPhotos',
          'isAnonymous', 'unreadCount', 'createdAt'
        ]) &&
        // 친구이거나, 게시글(익명/전체공개) DM 허용 조건 만족
        (isFriendWith(otherUid()) || canDMViaPost());
      
      // 수정: 메시지 관련 필드만 변경 허용
      allow update: if request.auth != null &&
        request.auth.uid in resource.data.participants &&
        // participants는 변경 불가
        request.resource.data.participants == resource.data.participants &&
        // 메시지 관련 필드만 변경 가능
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['lastMessage', 'lastMessageTime', 'lastMessageSenderId', 'unreadCount', 'updatedAt']);
      
      // 삭제: 금지 (대화방 숨김은 클라이언트에서 UI로만 처리)
      allow delete: if false;
      
      // ===== 메시지 서브컬렉션 =====
      match /messages/{messageId} {
        // 읽기: 대화방 참여자만
        // get() 호출 최소화를 위해 함수 사용
        function isParticipant() {
          return request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        }
        
        // 개별 메시지 읽기
        allow get: if request.auth != null && isParticipant();
        
        // 메시지 목록 조회
        allow list: if request.auth != null && isParticipant();
        
        // 생성: 핵심 검증만 유지
        allow create: if request.auth != null &&
          isParticipant() &&
          // 발신자는 본인
          request.auth.uid == request.resource.data.senderId &&
          // 메시지는 비어있지 않음
          request.resource.data.text.size() > 0 &&
          // 메시지 길이 제한 (500자)
          request.resource.data.text.size() <= 500 &&
          // 초기 읽음 상태는 false
          request.resource.data.isRead == false;
        
        // 수정: 읽음 처리 로직만 유지
        allow update: if request.auth != null &&
          isParticipant() &&
          // 수신자만 읽음 처리 가능
          request.auth.uid != resource.data.senderId &&
          // isRead만 false→true로 변경
          resource.data.isRead == false &&
          request.resource.data.isRead == true &&
          // 다른 필드는 변경 불가
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['isRead', 'readAt']);
        
        // 삭제: 금지 (메시지는 영구 보존)
        allow delete: if false;
      }
    }
  }
}
