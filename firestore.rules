rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===== 사용자 컬렉션 =====
    match /users/{userId} {
      // 본인만 민감한 필드 수정 가능
      allow read: if true; // 프로필은 공개 읽기 허용
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if false; // 사용자 삭제는 금지
      
      // 저장된 게시글 서브컬렉션
      match /savedPosts/{postId} {
        // 본인만 자신의 저장된 게시글 읽기/쓰기 가능
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // ===== 친구 요청 컬렉션 =====
    match /friend_requests/{requestId} {
      // 요청 생성: 발신자만 가능, 자기 자신에게 요청 금지
      allow create: if 
        request.auth != null &&
        request.auth.uid == request.resource.data.fromUid &&
        request.auth.uid != request.resource.data.toUid &&
        request.resource.data.status == 'PENDING';
      
      // 요청 읽기: 발신자 또는 수신자만 가능
      allow read: if 
        request.auth != null &&
        (request.auth.uid == resource.data.fromUid || 
         request.auth.uid == resource.data.toUid);
      
      // 요청 업데이트: 상태 전이 규칙 적용
      allow update: if 
        request.auth != null &&
        (
          // PENDING → CANCELED: 발신자만 가능
          (resource.data.status == 'PENDING' && 
           request.resource.data.status == 'CANCELED' &&
           request.auth.uid == resource.data.fromUid) ||
          
          // PENDING → ACCEPTED/REJECTED: 수신자만 가능
          (resource.data.status == 'PENDING' && 
           (request.resource.data.status == 'ACCEPTED' || 
            request.resource.data.status == 'REJECTED') &&
           request.auth.uid == resource.data.toUid)
        );
      
      // 요청 삭제: 금지 (상태 변경으로 처리)
      allow delete: if false;
    }
    
    // ===== 친구 관계 컬렉션 =====
    match /friendships/{pairId} {
      // 읽기: 관계에 포함된 사용자만 가능
      allow read: if 
        request.auth != null &&
        request.auth.uid in resource.data.uids;
      
      // 쓰기: 클라우드 함수만 가능 (보안 강화)
      allow write: if false;
    }
    
    // ===== 차단 컬렉션 =====
    match /blocks/{blockId} {
      // 읽기: 차단한 사용자만 가능 (차단 상태 확인을 위해)
      allow read: if 
        request.auth != null &&
        request.auth.uid == resource.data.blocker;
      
      // 생성/삭제: 차단하는 사용자만 가능
      allow create, delete: if 
        request.auth != null &&
        request.auth.uid == request.resource.data.blocker;
      
      // 업데이트: 금지
      allow update: if false;
    }
    
    // ===== 관계(Relationships) 컬렉션 =====
    match /relationships/{relationshipId} {
      // 읽기: 본인과 관련된 관계만 읽기 가능
      allow read: if 
        request.auth != null &&
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.friendId);
      
      // 생성: 본인이 userId인 경우만 가능
      allow create: if 
        request.auth != null &&
        request.auth.uid == request.resource.data.userId;
      
      // 업데이트: 본인과 관련된 관계만 수정 가능
      allow update: if 
        request.auth != null &&
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.friendId);
      
      // 삭제: 본인과 관련된 관계만 삭제 가능
      allow delete: if 
        request.auth != null &&
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.friendId);
    }
    
    // ===== 친구 카테고리 컬렉션 =====
    match /friend_categories/{categoryId} {
      // 읽기: 본인의 카테고리 또는 내가 포함된 카테고리 읽기 가능
      allow read: if 
        request.auth != null &&
        (request.auth.uid == resource.data.userId || 
         request.auth.uid in resource.data.friendIds);
      
      // 생성: 본인이 userId인 경우만 가능
      allow create: if 
        request.auth != null &&
        request.auth.uid == request.resource.data.userId;
      
      // 업데이트: 본인의 카테고리만 수정 가능
      allow update: if 
        request.auth != null &&
        request.auth.uid == resource.data.userId;
      
      // 삭제: 본인의 카테고리만 삭제 가능
      allow delete: if 
        request.auth != null &&
        request.auth.uid == resource.data.userId;
    }
    
    // ===== 기존 컬렉션들 (호환성 유지) =====
    match /posts/{postId} {
      // 게시글 읽기: 공개 범위에 따라 제한
      // 1. 전체 공개(visibility == 'public' 또는 필드 없음) → 누구나 읽기 가능
      // 2. 카테고리별 공개(visibility == 'category') → allowedUserIds에 포함된 사용자만 읽기 가능
      allow read: if 
        // 전체 공개인 경우 (기본값)
        (!resource.data.keys().hasAny(['visibility']) || resource.data.visibility == 'public') ||
        // 카테고리별 공개이고 허용된 사용자인 경우
        (resource.data.visibility == 'category' && request.auth != null && 
         (request.auth.uid == resource.data.userId || 
          (resource.data.keys().hasAny(['allowedUserIds']) && request.auth.uid in resource.data.allowedUserIds)));
      
      allow create: if request.auth != null;
      
      // 게시글 수정: 작성자만 가능 또는 좋아요 필드만 변경하는 경우 읽기 권한이 있는 사용자 가능
      allow update: if request.auth != null && 
        // 읽기 권한 체크 (전체 공개 또는 허용된 사용자)
        (
          (!resource.data.keys().hasAny(['visibility']) || resource.data.visibility == 'public') ||
          (resource.data.visibility == 'category' && 
           (request.auth.uid == resource.data.userId || 
            (resource.data.keys().hasAny(['allowedUserIds']) && request.auth.uid in resource.data.allowedUserIds)))
        ) &&
        // createdAt 필드는 절대 수정 불가
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['createdAt'])) &&
        (request.auth.uid == resource.data.userId ||
         // 좋아요 필드만 변경하는 경우 누구나 가능 (읽기 권한이 있으면)
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']));
      
      // 게시글 삭제: 작성자만 가능
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // 게시글의 댓글
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && 
          request.auth.uid == resource.data.userId;
      }
    }
    
    match /meetups/{meetupId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // 모임의 댓글
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && 
          request.auth.uid == resource.data.userId;
      }
    }
    
    // ===== 모임 참여자 컬렉션 =====
    match /meetup_participants/{participantId} {
      // 읽기: 모든 사용자가 참여자 정보를 볼 수 있음
      allow read: if true;
      
      // 생성: 본인만 참여 신청 가능
      allow create: if 
        request.auth != null &&
        request.auth.uid == request.resource.data.userId;
      
      // 업데이트: 본인 또는 모임 주최자만 수정 가능
      allow update: if 
        request.auth != null &&
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.hostId);
      
      // 삭제: 본인만 참여 취소 가능
      allow delete: if 
        request.auth != null &&
        request.auth.uid == resource.data.userId;
    }
    
    // ===== 리뷰 합의 기능 추가 규칙 =====
    
    // 관리자 설정 (Feature Flags 등)
    match /admin_settings/{document} {
      // 읽기: 로그인한 사용자만 가능 (Feature Flag 확인용)
      allow read: if request.auth != null;
      
      // 쓰기: 관리자만 가능
      allow write: if 
        request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // 사용자 설정 (알림 설정 등 기존 기능 확장)
    match /user_settings/{userId} {
      // 본인만 읽기/쓰기 가능
      allow read, write: if 
        request.auth != null && 
        request.auth.uid == userId;
    }

    // 모임별 리뷰 요청 (meetings/{meetupId}/pendingReviews/{reviewId})
    match /meetings/{meetupId}/pendingReviews/{reviewId} {
      // 리뷰 요청 읽기: 요청자 또는 수신자만 가능
      allow read: if 
        request.auth != null &&
        (request.auth.uid == resource.data.requesterId || 
         request.auth.uid == resource.data.recipientId);
      
      // 리뷰 요청 생성: 요청자만 가능, 해당 모임 참여자여야 함
      allow create: if 
        request.auth != null &&
        request.auth.uid == request.resource.data.requesterId &&
        // 모임 참여자인지 확인
        request.auth.uid in get(/databases/$(database)/documents/meetups/$(meetupId)).data.participants &&
        // 수신자도 참여자인지 확인
        request.resource.data.recipientId in get(/databases/$(database)/documents/meetups/$(meetupId)).data.participants &&
        // 자기 자신에게 요청하지 않음
        request.auth.uid != request.resource.data.recipientId &&
        // 초기 상태는 pending이어야 함
        request.resource.data.status == 'pending';
      
      // 리뷰 요청 업데이트: 수신자만 상태 변경 가능
      allow update: if 
        request.auth != null &&
        request.auth.uid == resource.data.recipientId &&
        // 기존 상태가 pending이어야 함
        resource.data.status == 'pending' &&
        // 새 상태는 accepted 또는 rejected만 가능
        (request.resource.data.status == 'accepted' || 
         request.resource.data.status == 'rejected') &&
        // 다른 필드는 변경하지 않음 (상태와 응답 시간, 메시지만)
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'respondedAt', 'responseMessage']);
      
      // 삭제 금지 (상태 변경으로만 관리)
      allow delete: if false;
    }

    // 모임별 리뷰 합의 결과 (meetings/{meetupId}/reviews/{consensusId})
    match /meetings/{meetupId}/reviews/{consensusId} {
      // 리뷰 합의 읽기: 해당 모임 참여자만 가능
      allow read: if 
        request.auth != null &&
        request.auth.uid in get(/databases/$(database)/documents/meetups/$(meetupId)).data.participants;
      
      // 리뷰 합의 생성: 서버 사이드 로직으로만 생성 (Cloud Functions)
      // 클라이언트에서 직접 생성 금지
      allow create: if false;
      
      // 리뷰 합의 업데이트/삭제: 금지 (불변 데이터)
      allow update, delete: if false;
    }

    // 알림 컬렉션 (기존 확장)
    match /notifications/{notificationId} {
      // 본인의 알림만 읽기 가능
      allow read: if 
        request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // 알림 생성: 서버 사이드 로직으로만 생성
      allow create: if false;
      
      // 알림 업데이트: 본인만 읽음 상태 변경 가능
      allow update: if 
        request.auth != null && 
        request.auth.uid == resource.data.userId &&
        // 읽음 상태만 변경 가능
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      
      // 알림 삭제: 본인만 가능
      allow delete: if 
        request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // ===== 광고 배너 컬렉션 =====
    match /ad_banners/{bannerId} {
      // 모든 사용자가 광고를 읽을 수 있음
      allow read: if true;
      
      // 광고 생성/수정/삭제는 Firebase Console에서만 가능
      // (관리자가 직접 관리)
      allow write: if false;
    }
    
    // ===== 후기(Reviews) 컬렉션 =====
    match /reviews/{reviewId} {
      // 읽기: 본인의 후기 또는 공개된 후기만 읽기 가능
      allow read: if 
        request.auth != null &&
        (request.auth.uid == resource.data.authorId || 
         resource.data.privacyLevel == 'public' ||
         (resource.data.privacyLevel == 'friends' && 
          exists(/databases/$(database)/documents/relationships/$(request.auth.uid + '_' + resource.data.authorId))) ||
         (resource.data.privacyLevel == 'school' && 
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.school == 
          get(/databases/$(database)/documents/users/$(resource.data.authorId)).data.school));
      
      // 생성: 로그인한 사용자만 가능, authorId는 본인이어야 함
      allow create: if 
        request.auth != null &&
        request.auth.uid == request.resource.data.authorId;
      
      // 수정: 본인의 후기만 수정 가능
      allow update: if 
        request.auth != null &&
        request.auth.uid == resource.data.authorId;
      
      // 삭제: 본인의 후기만 삭제 가능
      allow delete: if 
        request.auth != null &&
        request.auth.uid == resource.data.authorId;
    }
    
    // ===== 댓글(Comments) 컬렉션 (최상위) =====
    match /comments/{commentId} {
      // 읽기: 모든 사용자가 댓글을 읽을 수 있음
      allow read: if true;
      
      // 생성: 로그인한 사용자만 댓글 작성 가능
      allow create: if 
        request.auth != null &&
        request.auth.uid == request.resource.data.userId;
      
      // 수정: 본인의 댓글 수정 가능 또는 좋아요/답글 필드만 변경하는 경우 누구나 가능
      allow update: if 
        request.auth != null &&
        // createdAt 필드는 절대 수정 불가
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['createdAt'])) &&
        (request.auth.uid == resource.data.userId ||
         // 좋아요 관련 필드만 변경하는 경우 (likeCount, likedBy만 변경 허용)
         (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likeCount', 'likedBy']) ||
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likeCount']) ||
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy'])));
      
      // 삭제: 본인의 댓글만 삭제 가능
      allow delete: if 
        request.auth != null &&
        request.auth.uid == resource.data.userId;
    }
    
    // ===== 기존 호환성 유지 끝 =====
  }
}
