// migration/firestore.rules.additions
// 프로필 그리드 기능을 위한 추가 Firestore 보안 규칙
// 기존 firestore.rules 파일에 수동으로 추가해야 합니다.

// ===== 프로필 그리드 기능 추가 규칙 =====

// 사용자별 포스트 컬렉션 (users/{uid}/posts/{postId})
match /users/{userId}/posts/{postId} {
  // 포스트 읽기: 공개 포스트는 모든 사용자, 친구 전용 포스트는 친구만
  allow read: if 
    request.auth != null &&
    (
      // 본인의 포스트는 항상 읽기 가능
      request.auth.uid == userId ||
      
      // 공개 포스트는 모든 로그인 사용자가 읽기 가능
      resource.data.visibility == 'public' ||
      
      // 친구 전용 포스트는 친구 관계 확인 후 읽기 가능
      (resource.data.visibility == 'friends' && 
       exists(/databases/$(database)/documents/friendships/$(request.auth.uid + '_' + userId)))
    );
  
  // 포스트 생성: 본인만 가능
  allow create: if 
    request.auth != null &&
    request.auth.uid == userId &&
    request.resource.data.authorId == userId &&
    // 필수 필드 검증
    request.resource.data.keys().hasAll(['postId', 'authorId', 'type', 'text', 'createdAt', 'visibility', 'meta']) &&
    // visibility 값 검증
    request.resource.data.visibility in ['public', 'friends'] &&
    // 생성 시간 검증
    request.resource.data.createdAt is timestamp;
  
  // 포스트 업데이트: 본인만 가능, 제한된 필드만 수정
  allow update: if 
    request.auth != null &&
    request.auth.uid == userId &&
    request.auth.uid == resource.data.authorId &&
    // 수정 가능한 필드만 변경 (meta 필드는 좋아요/댓글 수 업데이트용)
    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['text', 'visibility', 'meta']);
  
  // 포스트 삭제: 본인만 가능
  allow delete: if 
    request.auth != null &&
    request.auth.uid == userId &&
    request.auth.uid == resource.data.authorId;
}

// 하이라이트 컬렉션 (users/{uid}/highlights/{highlightId})
match /users/{userId}/highlights/{highlightId} {
  // 하이라이트 읽기: 공개 프로필이거나 친구 관계인 경우
  allow read: if 
    request.auth != null &&
    (
      // 본인의 하이라이트는 항상 읽기 가능
      request.auth.uid == userId ||
      
      // 친구 관계 확인 (실제 구현에서는 사용자 프로필의 공개 설정도 확인)
      exists(/databases/$(database)/documents/friendships/$(request.auth.uid + '_' + userId))
    );
  
  // 하이라이트 생성/수정/삭제: 본인만 가능
  allow write: if 
    request.auth != null &&
    request.auth.uid == userId;
}

// Feature Flag 컬렉션 (admin_settings/{flagId})
match /admin_settings/{flagId} {
  // Feature Flag 읽기: 로그인한 사용자만 가능
  allow read: if request.auth != null;
  
  // Feature Flag 쓰기: 관리자만 가능
  allow write: if 
    request.auth != null &&
    exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
}

// 프로필 통계 캐시 컬렉션 (users/{uid}/stats/summary)
match /users/{userId}/stats/summary {
  // 통계 읽기: 본인이거나 친구 관계인 경우
  allow read: if 
    request.auth != null &&
    (
      request.auth.uid == userId ||
      exists(/databases/$(database)/documents/friendships/$(request.auth.uid + '_' + userId))
    );
  
  // 통계 쓰기: 서버 사이드 로직에서만 (Cloud Functions)
  allow write: if false;
}
